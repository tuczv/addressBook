/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.tuczv.addressBook.api;

import com.github.tuczv.addressBook.api.dto.ContactApiDto;
import com.github.tuczv.addressBook.api.dto.ErrorApiDto;
import java.util.UUID;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "ContactsV1", description = "the ContactsV1 API")
@RequestMapping("${openapi.addressbook.base-path:}")
public interface ContactsV1Api {

    /**
     * POST /v1/contacts : Add new contact.
     *
     * @param contactApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "createContact",
        summary = "Add new contact.",
        tags = { "contacts-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContactApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/contacts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<List<ContactApiDto>> createContact(
        @Parameter(name = "ContactApiDto", description = "", required = true) @Valid @RequestBody ContactApiDto contactApiDto
    );


    /**
     * GET /v1/contacts/group/{groupName} : Get a contacts by group. Results are pageable with seek method.
     *
     * @param groupName Group name (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findContactByGroup",
        summary = "Get a contacts by group. Results are pageable with seek method.",
        tags = { "contacts-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContactApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/contacts/group/{groupName}",
        produces = { "application/json" }
    )
    ResponseEntity<List<ContactApiDto>> findContactByGroup(
        @Parameter(name = "groupName", description = "Group name", required = true) @PathVariable("groupName") UUID groupName
    );


    /**
     * GET /v1/contacts/{contactId} : Get a contact by id. Results are pageable with seek method.
     *
     * @param contactId Contact Id (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findContactById",
        summary = "Get a contact by id. Results are pageable with seek method.",
        tags = { "contacts-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContactApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/contacts/{contactId}",
        produces = { "application/json" }
    )
    ResponseEntity<ContactApiDto> findContactById(
        @Parameter(name = "contactId", description = "Contact Id", required = true) @PathVariable("contactId") UUID contactId
    );


    /**
     * GET /v1/contacts : Get contacts. Results are pageable with seek method.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findContacts",
        summary = "Get contacts. Results are pageable with seek method.",
        tags = { "contacts-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContactApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/contacts",
        produces = { "application/json" }
    )
    ResponseEntity<List<ContactApiDto>> findContacts(
        
    );


    /**
     * DELETE /v1/contacts/{contactId} : Delete a contact by id.
     *
     * @param contactId Contact Id (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "removeContactById",
        summary = "Delete a contact by id.",
        tags = { "contacts-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContactApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/contacts/{contactId}",
        produces = { "application/json" }
    )
    ResponseEntity<ContactApiDto> removeContactById(
        @Parameter(name = "contactId", description = "Contact Id", required = true) @PathVariable("contactId") UUID contactId
    );


    /**
     * PUT /v1/contacts/{contactId} : Update a contact by id.
     *
     * @param contactId Contact Id (required)
     * @param contactApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "updateContactById",
        summary = "Update a contact by id.",
        tags = { "contacts-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ContactApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/contacts/{contactId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<ContactApiDto> updateContactById(
        @Parameter(name = "contactId", description = "Contact Id", required = true) @PathVariable("contactId") UUID contactId,
        @Parameter(name = "ContactApiDto", description = "", required = true) @Valid @RequestBody ContactApiDto contactApiDto
    );

}
