/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.tuczv.addressBook.api;

import com.github.tuczv.addressBook.api.dto.ErrorApiDto;
import com.github.tuczv.addressBook.api.dto.UserApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "UsersV1", description = "the UsersV1 API")
@RequestMapping("${openapi.addressbook.base-path:}")
public interface UsersV1Api {

    /**
     * POST /v1/users/register : Add a user.
     *
     * @param userApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "createUser",
        summary = "Add a user.",
        tags = { "users-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/users/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserApiDto> createUser(
        @Parameter(name = "UserApiDto", description = "", required = true) @Valid @RequestBody UserApiDto userApiDto
    );


    /**
     * GET /v1/users/{secret} : Get a user by secret.
     *
     * @param secret Secret (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findUserBySecret",
        summary = "Get a user by secret.",
        tags = { "users-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{secret}",
        produces = { "application/json" }
    )
    ResponseEntity<UserApiDto> findUserBySecret(
        @Parameter(name = "secret", description = "Secret", required = true) @PathVariable("secret") String secret
    );


    /**
     * GET /v1/users/{username} : Get a user by username.
     *
     * @param username Username (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findUserByUsername",
        summary = "Get a user by username.",
        tags = { "users-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{username}",
        produces = { "application/json" }
    )
    ResponseEntity<UserApiDto> findUserByUsername(
        @Parameter(name = "username", description = "Username", required = true) @PathVariable("username") String username
    );


    /**
     * GET /v1/users : Get a users.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findUsers",
        summary = "Get a users.",
        tags = { "users-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserApiDto>> findUsers(
        
    );


    /**
     * GET /v1/users/login : Login user.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "loginUser",
        summary = "Login user.",
        tags = { "users-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/login",
        produces = { "application/json" }
    )
    ResponseEntity<UserApiDto> loginUser(
        
    );


    /**
     * PUT /v1/users/{username} : Update a user.
     *
     * @param username Username (required)
     * @param userApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "updateUser",
        summary = "Update a user.",
        tags = { "users-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/users/{username}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserApiDto> updateUser(
        @Parameter(name = "username", description = "Username", required = true) @PathVariable("username") String username,
        @Parameter(name = "UserApiDto", description = "", required = true) @Valid @RequestBody UserApiDto userApiDto
    );

}
