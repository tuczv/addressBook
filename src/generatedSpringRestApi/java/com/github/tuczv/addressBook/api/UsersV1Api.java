/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.tuczv.addressBook.api;

import com.github.tuczv.addressBook.api.dto.ErrorApiDto;
import com.github.tuczv.addressBook.api.dto.UserApiDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface UsersV1Api {

    /**
     * POST /v1/users/register : Add a user.
     *
     * @param userApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/users/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserApiDto> createUser(
         @Valid @RequestBody UserApiDto userApiDto
    );


    /**
     * GET /v1/users/{secret} : Get a user by secret.
     *
     * @param secret Secret (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{secret}",
        produces = { "application/json" }
    )
    ResponseEntity<UserApiDto> findUserBySecret(
         @PathVariable("secret") String secret
    );


    /**
     * GET /v1/users/{username} : Get a user by username.
     *
     * @param username Username (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/{username}",
        produces = { "application/json" }
    )
    ResponseEntity<UserApiDto> findUserByUsername(
         @PathVariable("username") String username
    );


    /**
     * GET /v1/users : Get a users.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserApiDto>> findUsers(
        
    );


    /**
     * GET /v1/users/login : Login user.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/users/login",
        produces = { "application/json" }
    )
    ResponseEntity<UserApiDto> loginUser(
        
    );


    /**
     * PUT /v1/users/{username} : Update a user.
     *
     * @param username Username (required)
     * @param userApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/users/{username}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserApiDto> updateUser(
         @PathVariable("username") String username,
         @Valid @RequestBody UserApiDto userApiDto
    );

}
