/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.tuczv.addressBook.api;

import com.github.tuczv.addressBook.api.dto.ErrorApiDto;
import com.github.tuczv.addressBook.api.dto.MailApiDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "EmailsV1", description = "the EmailsV1 API")
@RequestMapping("${openapi.addressbook.base-path:}")
public interface EmailsV1Api {

    /**
     * POST /v1/emails : Post a email.
     *
     * @param mailApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "createEmail",
        summary = "Post a email.",
        tags = { "emails-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MailApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/emails",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<MailApiDto> createEmail(
        @Parameter(name = "MailApiDto", description = "", required = true) @Valid @RequestBody MailApiDto mailApiDto
    );


    /**
     * GET /v1/emails : Get a emails. Results are pageable with seek method.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @Operation(
        operationId = "findEmails",
        summary = "Get a emails. Results are pageable with seek method.",
        tags = { "emails-v1" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MailApiDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorApiDto.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/emails",
        produces = { "application/json" }
    )
    ResponseEntity<List<MailApiDto>> findEmails(
        
    );

}
