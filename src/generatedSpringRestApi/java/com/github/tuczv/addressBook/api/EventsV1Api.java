/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.tuczv.addressBook.api;

import com.github.tuczv.addressBook.api.dto.CalendarEventApiDto;
import com.github.tuczv.addressBook.api.dto.ErrorApiDto;
import com.github.tuczv.addressBook.api.dto.MailApiDto;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface EventsV1Api {

    /**
     * POST /v1/events : Post a event.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/events",
        produces = { "application/json" }
    )
    ResponseEntity<CalendarEventApiDto> createEvent(
        
    );


    /**
     * DELETE /v1/emails/{emailId} : Get a email by Id.
     *
     * @param emailId Email id (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/emails/{emailId}",
        produces = { "application/json" }
    )
    ResponseEntity<MailApiDto> findEmailById(
         @PathVariable("emailId") UUID emailId
    );


    /**
     * GET /v1/events/{eventId} : Get a event by Id.
     *
     * @param eventId Event id (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/events/{eventId}",
        produces = { "application/json" }
    )
    ResponseEntity<CalendarEventApiDto> findEventById(
         @PathVariable("eventId") UUID eventId
    );


    /**
     * GET /v1/events : Get a calendar events. Results are pageable with seek method.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/events",
        produces = { "application/json" }
    )
    ResponseEntity<List<CalendarEventApiDto>> findEvents(
        
    );


    /**
     * PUT /v1/events/{eventId} : Update a event.
     *
     * @param eventId Event id (required)
     * @param calendarEventApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/events/{eventId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<CalendarEventApiDto> updateEvent(
         @PathVariable("eventId") UUID eventId,
         @Valid @RequestBody CalendarEventApiDto calendarEventApiDto
    );

}
