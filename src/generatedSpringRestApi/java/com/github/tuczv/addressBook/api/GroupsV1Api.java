/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.github.tuczv.addressBook.api;

import com.github.tuczv.addressBook.api.dto.ErrorApiDto;
import com.github.tuczv.addressBook.api.dto.GroupApiDto;
import java.util.UUID;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
public interface GroupsV1Api {

    /**
     * POST /v1/groups : Create a group.
     *
     * @param groupApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/groups",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<GroupApiDto> createGroup(
         @Valid @RequestBody GroupApiDto groupApiDto
    );


    /**
     * GET /v1/groups/{groupId} : Get a group by Id.
     *
     * @param groupId Group id (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/groups/{groupId}",
        produces = { "application/json" }
    )
    ResponseEntity<GroupApiDto> findGroup(
         @PathVariable("groupId") UUID groupId
    );


    /**
     * GET /v1/groups/search/{name} : Get a group by name.
     *
     * @param name Group name (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/groups/search/{name}",
        produces = { "application/json" }
    )
    ResponseEntity<GroupApiDto> findGroupByName(
         @PathVariable("name") String name
    );


    /**
     * GET /v1/groups : Get a groups. Results are pageable with seek method.
     *
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/groups",
        produces = { "application/json" }
    )
    ResponseEntity<List<GroupApiDto>> findGroups(
        
    );


    /**
     * DELETE /v1/groups/{groupId} : Delete a group.
     *
     * @param groupId Group id (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/groups/{groupId}",
        produces = { "application/json" }
    )
    ResponseEntity<GroupApiDto> removeGroup(
         @PathVariable("groupId") UUID groupId
    );


    /**
     * PUT /v1/groups/{groupId} : Update a group.
     *
     * @param groupId Group id (required)
     * @param groupApiDto  (required)
     * @return OK (status code 200)
     *         or error (status code 400)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/groups/{groupId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<GroupApiDto> updateGroup(
         @PathVariable("groupId") UUID groupId,
         @Valid @RequestBody GroupApiDto groupApiDto
    );

}
